/**
 * @description Interface for Contact DAO
 * @author Accenture
 *
 * @history
 *
 *    | Developer Email                | Date                  | JIRA                   | Change Summary                         |
 *    |--------------------------------|-----------------------|------------------------|----------------------------------------|
 *    | roy.nino.s.regala              | April 25, 2023        | DEPP-5567              | Created file                           |
 *    | eugene.andrew.abuan            | June 08, 2023         | DEPP-5414              | Added checkWorkEmailFlowInputExist     |
 *    | mark.j.mahilum                 | June 26, 2023         | DEPP-5846              | Added new list for 5846 Methods        |
 *    | roy.nino.s.regala              | July 20, 2023         | DEPP-5677              | Added new list                         |
 *    | mark.j.mahilum                 | Aug 23, 2023          | DEPP-6215              | Added new list                         |
 *    | julie.jane.alegre              | Sept 05, 2023         | DEPP-5965              | Added getContactsFromConvertedLead     |
 *    | roy.nino.s.regala              | Sept 20, 2023         | DEPP-6714              | method getPersonContactsBySetIds       |
 *    | alexander.cadalin              | Sep 22, 2023          | DEPP-6652              | method getContactsForQTACAddressUpdate |
 *    | neil.s.h.lesidan               | Sep 20, 2023          | DEPP-6478              | Added getPersonContactsByEmailOrName   |
 *    | arsenio.jr.dayrit              | Sept 22,2023          | DEPP-6720              | added getContactByCaseMobile           |
 */
public interface IContactsDAO extends DmlInterface {
    List<Contact> getExistingPersonContactsWithMatchingEmails(
        Set<String> allEmailsToMatch,
        Set<Id> newContactIds,
        String accessLevel
    );
    List<Contact> getPersonContactsWithLimit(Integer recordsCount);
    List<Contact> checkWorkEmailFlowInputExist(String emailInput);   
    List<Contact> getContactsWithMatchingApplicationDetails(
        ContactsDAO.QueryParamWrapper queryParam,
        String accessLevel
    );
    List<Contact> getContactsWithMatchingEmails(
        Set<String> applicationEmailsToMatch,
        String accessLevel
    );
    List<Contact> getContactsWithMatchingSamsApplications(
        ContactsDAO.QueryParamWrapper queryParam,
        String accessLevel
    );  
    List<Contact> getPersonContactsByCalculatedCadences(
        Set<String> calculatedCadences
    );
    List<Contact> getContactCalculatedCadenceByIds(
        Set<String> recordIds,
        String accessLevel
    );
    List<Contact> getContactsFromConvertedLead(
        Set<Id> recordIds,
        String accessLevel
    );
    List<Contact> getPersonContactsByEmailOrName(
        ContactsDAO.QueryParamWrapperEmailOrName queryParam,
        AccessLevel accessLevel
    ); 
    List<Contact> getPersonContactsBySetIds(
        Set<Id> recordIds,
        AccessLevel accessLevel
    );
    List<Contact> getContactByCaseMobile(
        Set<String> caseMobile,
        AccessLevel accessLevel
    );

    List<Contact> getContactsForQTACAddressUpdate(
        Set<Id> qtacApplicantIdSet,
        AccessLevel accessLevel
    );  
}
