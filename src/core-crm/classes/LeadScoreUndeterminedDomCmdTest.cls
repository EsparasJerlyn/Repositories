/**
 * @description Test class for LeadScoreUndeterminedDomCmd
 * 
 * @author Accenture
 *
 * @history
 *
 *    | Developer Email                | Date                  | JIRA                   | Change Summary               |
      |--------------------------------|-----------------------|------------------------|------------------------------|
      | roy.nino.s.regala              | October 06, 2023      | DEPP-5866              | Created file                 |
      |                                |                       |                        |                              |
 */
@isTest
private class LeadScoreUndeterminedDomCmdTest {
    @isTest
    private static void processStudyLevelForCaseTest() {//NOPMD test class is mocked user is not needed

        ImplementationSelector.DAO.setMock(new LeadScoreConfigurationDAOMock());
        ImplementationSelector.DAO.setMock(new CasesDAOMock());
        ImplementationSelector.DAO.setMock(new ContactsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadScoreDetailsDAOMock());
        ImplementationSelector.DAO.setMock(new MarketingSegmentationsDAOMock());

        List<Lead_Score_Configuration__c> leadScoreConfigList = new List<Lead_Score_Configuration__c>();

        leadScoreConfigList.add(
            new Lead_Score_Configuration__c(
                Name = 'Enquiries',
                RecordTypeId = LeadScoreConfigurationDAO.RECTYPE_ID_CATEGORY,
                Domestic_International__c = 'Domestic',
                Study_Level__c = 'Undetermined',
                Description__c = '',
                Score_Allocation__c = null,
                Time_Limit_Months__c = 36,
                Max_Score__c = 15
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigList, true, AccessLevel.USER_MODE);

        List<Lead_Score_Configuration__c> leadScoreConfigChildList = new List<Lead_Score_Configuration__c>();
        leadScoreConfigChildList.addAll(
            TestDataFactory.createDomestcAndUndeterminedSubCategory(
                leadScoreConfigList[0].Id,
                new List<String>{
                    'Applying for a course',
                    'Entry requirements & study pathways',
                    'Fees, costs and scholarships',
                    'Course information',
                    'My application and offer',
                    'My enrolment',
                    'Student Life'
                },
                new List<Integer>{ 10, 10, 5, 5, 5, 5, 5 }
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigChildList, true, AccessLevel.USER_MODE);

        List<Contact> contactList = TestDataFactory.createTestContactRecords(1);
        ContactsDAO.newInstance().insertRecords(contactList, true, AccessLevel.USER_MODE);

        List<Lead> leadList = TestDataFactory.createTestLeadRecords(1);
        LeadsDAO.newInstance().insertRecords(leadList, true, AccessLevel.USER_MODE);

        List<Case> caseList = new List<Case>();
        caseList.add(
            new Case(ContactId = contactList[0].Id, Category__c = 'Applying for a course')
        );
        caseList.add(new Case(Lead__c = leadList[0].Id, Category__c = 'Course information'));

        CasesDAO.newInstance().insertRecords(caseList, true, AccessLevel.USER_MODE);

        LeadScoreDetailsDAO.newInstance()
            .insertRecords(
                new List<Lead_Score_Detail__c>{
                    new Lead_Score_Detail__c(Contact__c = contactList[0].Id)
                },
                false,
                AccessLevel.USER_MODE
            );

        Set<Id> contactAndLeadIds = new Set<Id>{ contactList[0].Id, leadList[0].Id };

        LeadScoreCalculatorService.LeadScoreCalculatorParams leadScoreCalcParams = new LeadScoreCalculatorService.LeadScoreCalculatorParams(
            Case.sObjectType,
            new Map<Id, Case>(caseList),
            LeadScoreConfigurationDAO.newInstance()
                .getLeadScoreConfigByRecordTypeIds(
                    AccessLevel.USER_MODE,
                    LeadScoreConfigurationDAO.RECTYPE_IDS_CATEGORY_AND_SUB_CATEGORY
                ),
            contactAndLeadIds
        );

        System.assert(
            !LeadScoreUndeterminedDomCmd.processStudyLevel(leadScoreCalcParams).isEmpty(),
            'Was not able to calcualte lead score details'
        );
    }

    @isTest
    private static void processStudyLevelForMarSegTest() {//NOPMD test class is mocked user is not needed
        
        ImplementationSelector.DAO.setMock(new LeadScoreConfigurationDAOMock());
        ImplementationSelector.DAO.setMock(new MarketingSegmentationsDAOMock());
        ImplementationSelector.DAO.setMock(new ContactsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadScoreDetailsDAOMock());
        ImplementationSelector.DAO.setMock(new InternationalTiersDAOMock());

        List<Lead_Score_Configuration__c> leadScoreConfigList = new List<Lead_Score_Configuration__c>();

        leadScoreConfigList.add(
            new Lead_Score_Configuration__c(
                Name = 'Residence',
                RecordTypeId = LeadScoreConfigurationDAO.RECTYPE_ID_CATEGORY,
                Domestic_International__c = 'Domestic',
                Study_Level__c = 'Undetermined',
                Description__c = '',
                Score_Allocation__c = null,
                Time_Limit_Months__c = 36,
                Max_Score__c = 15
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigList, true, AccessLevel.USER_MODE);

        List<Lead_Score_Configuration__c> leadScoreConfigChildList = new List<Lead_Score_Configuration__c>();
        leadScoreConfigChildList.addAll(
            TestDataFactory.createDomestcAndUndeterminedSubCategory(
                leadScoreConfigList[0].Id,
                new List<String>{ 'Australia (Onshore)', 'Non-Australia (offshore)' },
                new List<Integer>{ 10, 5 }
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigChildList, true, AccessLevel.USER_MODE);

        List<Contact> contactList = TestDataFactory.createTestContactRecords(1);
        ContactsDAO.newInstance().insertRecords(contactList, true, AccessLevel.USER_MODE);

        List<Lead> leadList = TestDataFactory.createTestLeadRecords(1);
        LeadsDAO.newInstance().insertRecords(leadList, true, AccessLevel.USER_MODE);

        List<Marketing_Segmentation__c> marSegList = new List<Marketing_Segmentation__c>();
        marSegList.add(
            new Marketing_Segmentation__c(
                Contact__c = contactList[0].Id,
                My_Country_Of_Residency__c = 'Australia',
                My_Funding_Source__c = 'I need a full scholarship'
            )
        );
        marSegList.add(
            new Marketing_Segmentation__c(
                Lead__c = leadList[0].Id,
                My_Country_Of_Residency__c = 'New Zealand'
            )
        );

        LeadScoreDetailsDAO.newInstance()
            .insertRecords(
                new List<Lead_Score_Detail__c>{
                    new Lead_Score_Detail__c(Contact__c = contactList[0].Id),
                    new Lead_Score_Detail__c(Lead__c = leadList[0].Id)
                },
                false,
                AccessLevel.USER_MODE
            );

        MarketingSegmentationsDAO.newInstance()
            .insertRecords(marSegList, true, AccessLevel.USER_MODE);

        Set<Id> contactAndLeadIds = new Set<Id>{ contactList[0].Id, leadList[0].Id };

        Map<Id, Marketing_Segmentation__c> marSegMap = new Map<Id, Marketing_Segmentation__c>();

        for (Marketing_Segmentation__c marSeg : marSegList) {
            marSegMap.put(marSeg.Lead__c, marSeg);
            if (marSeg.Contact__c != null) {
                marSegMap.put(marSeg.Contact__c, marSeg);
            }
        }

        LeadScoreCalculatorService.LeadScoreCalculatorParams leadScoreCalcParams = new LeadScoreCalculatorService.LeadScoreCalculatorParams(
            Marketing_Segmentation__c.sObjectType,
            marSegMap,
            LeadScoreConfigurationDAO.newInstance()
                .getLeadScoreConfigByRecordTypeIds(
                    AccessLevel.USER_MODE,
                    LeadScoreConfigurationDAO.RECTYPE_IDS_CATEGORY_AND_SUB_CATEGORY
                ),
            contactAndLeadIds
        );

        System.assert(
            !LeadScoreUndeterminedDomCmd.processStudyLevel(leadScoreCalcParams).isEmpty(),
            'Was not able to calcualte lead score details'
        );
    }

    @isTest
    private static void processStudyLevelForContactAndLeadTest() {//NOPMD test class is mocked user is not needed
        
        ImplementationSelector.DAO.setMock(new LeadScoreConfigurationDAOMock());
        ImplementationSelector.DAO.setMock(new ContactsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadScoreDetailsDAOMock());
        ImplementationSelector.DAO.setMock(new MarketingSegmentationsDAOMock());

        List<Lead_Score_Configuration__c> leadScoreConfigList = new List<Lead_Score_Configuration__c>();

        leadScoreConfigList.add(
            new Lead_Score_Configuration__c(
                Name = 'Marketing Consent',
                RecordTypeId = LeadScoreConfigurationDAO.RECTYPE_ID_CATEGORY,
                Domestic_International__c = 'Domestic',
                Study_Level__c = 'Undetermined',
                Description__c = '',
                Score_Allocation__c = null,
                Time_Limit_Months__c = null,
                Max_Score__c = 0
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigList, true, AccessLevel.USER_MODE);

        List<Lead_Score_Configuration__c> leadScoreConfigChildList = new List<Lead_Score_Configuration__c>();
        leadScoreConfigChildList.addAll(
            TestDataFactory.createDomestcAndUndeterminedSubCategory(
                leadScoreConfigList[0].Id,
                new List<String>{ 'Yes', 'Is blank' },
                new List<Integer>{ 10, 0 }
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigChildList, true, AccessLevel.USER_MODE);

        List<Contact> contactList = new List<Contact>();

        contactList.add(new Contact(Email_Opt_In_DateTime__c = System.Today()));
        contactList.add(new Contact());

        ContactsDAO.newInstance().insertRecords(contactList, true, AccessLevel.USER_MODE);

        List<Lead> leadList = new List<Lead>();

        leadList.add(new Lead(Email_Opt_In_DateTime__c = System.Today()));
        leadList.add(new Lead());

        LeadsDAO.newInstance().insertRecords(leadList, true, AccessLevel.USER_MODE);

        LeadScoreDetailsDAO.newInstance()
            .insertRecords(
                new List<Lead_Score_Detail__c>{
                    new Lead_Score_Detail__c(Contact__c = contactList[0].Id),
                    new Lead_Score_Detail__c(Lead__c = leadList[0].Id)
                },
                false,
                AccessLevel.USER_MODE
            );

        Set<Id> contactIds = new Set<Id>{ contactList[0].Id, contactList[1].Id };

        LeadScoreCalculatorService.LeadScoreCalculatorParams leadScoreCalcParams = new LeadScoreCalculatorService.LeadScoreCalculatorParams(
            Contact.sObjectType,
            new Map<Id, Contact>(contactList),
            LeadScoreConfigurationDAO.newInstance()
                .getLeadScoreConfigByRecordTypeIds(
                    AccessLevel.USER_MODE,
                    LeadScoreConfigurationDAO.RECTYPE_IDS_CATEGORY_AND_SUB_CATEGORY
                ),
            contactIds
        );

        System.assert(
            !LeadScoreUndeterminedDomCmd.processStudyLevel(leadScoreCalcParams).isEmpty(),
            'Was not able to calcualte lead score details'
        );

        Set<Id> leadIds = new Set<Id>{ leadList[0].Id, leadList[1].Id };

        leadScoreCalcParams = new LeadScoreCalculatorService.LeadScoreCalculatorParams(
            Lead.sObjectType,
            new Map<Id, Lead>(leadList),
            LeadScoreConfigurationDAO.newInstance()
                .getLeadScoreConfigByRecordTypeIds(
                    AccessLevel.USER_MODE,
                    LeadScoreConfigurationDAO.RECTYPE_IDS_CATEGORY_AND_SUB_CATEGORY
                ),
            leadIds
        );

        System.assert(
            !LeadScoreUndeterminedDomCmd.processStudyLevel(leadScoreCalcParams).isEmpty(),
            'Was not able to calcualte lead score details'
        );
    }

    @isTest
    private static void processStudyLevelForMarInteractionTest() {//NOPMD test class is mocked user is not needed

        ImplementationSelector.DAO.setMock(new LeadScoreConfigurationDAOMock());
        ImplementationSelector.DAO.setMock(new ContactsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadsDAOMock());
        ImplementationSelector.DAO.setMock(new LeadScoreDetailsDAOMock());
        ImplementationSelector.DAO.setMock(new MarketingSegmentationsDAOMock());
        ImplementationSelector.DAO.setMock(new MarketingInteractionsDAOMock());

        List<Lead_Score_Configuration__c> leadScoreConfigList = new List<Lead_Score_Configuration__c>();

        leadScoreConfigList.add(
            new Lead_Score_Configuration__c(
                Name = 'Downloaded PDF',
                RecordTypeId = LeadScoreConfigurationDAO.RECTYPE_ID_CATEGORY,
                Domestic_International__c = 'Domestic',
                Study_Level__c = 'Undetermined',
                Description__c = '',
                Score_Allocation__c = null,
                Time_Limit_Months__c = null,
                Max_Score__c = 0
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigList, true, AccessLevel.USER_MODE);

        List<Lead_Score_Configuration__c> leadScoreConfigChildList = new List<Lead_Score_Configuration__c>();
        leadScoreConfigChildList.addAll(
            TestDataFactory.createDomestcAndUndeterminedSubCategory(
                leadScoreConfigList[0].Id,
                new List<String>{ 'Course Page PDF', 'Welcome Guide' },
                new List<Integer>{ 5, 5 }
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigChildList, true, AccessLevel.USER_MODE);

        List<Contact> contactList = TestDataFactory.createTestContactRecords(1);
        ContactsDAO.newInstance().insertRecords(contactList, true, AccessLevel.USER_MODE);

        List<Lead> leadList = TestDataFactory.createTestLeadRecords(1);
        LeadsDAO.newInstance().insertRecords(leadList, true, AccessLevel.USER_MODE);

        Set<Id> contactAndLeadIds = new Set<Id>{ contactList[0].Id, leadList[0].Id };

        List<Marketing_Interaction__c> marInteractionList = new List<Marketing_Interaction__c>();
        marInteractionList.add(
            new Marketing_Interaction__c(
                Contact__c = contactList[0].Id,
                Lead_Source__c = 'Course Page PDF Download'
            )
        );
        marInteractionList.add(
            new Marketing_Interaction__c(
                Lead__c = leadList[0].Id,
                Lead_Source__c = 'Welcome Guide Download'
            )
        );

        MarketingInteractionsDAO.newInstance()
            .insertRecords(marInteractionList, true, AccessLevel.USER_MODE);

        LeadScoreDetailsDAO.newInstance()
            .insertRecords(
                new List<Lead_Score_Detail__c>{
                    new Lead_Score_Detail__c(Contact__c = contactList[0].Id)
                },
                false,
                AccessLevel.USER_MODE
            );

        LeadScoreCalculatorService.LeadScoreCalculatorParams leadScoreCalcParams = new LeadScoreCalculatorService.LeadScoreCalculatorParams(
            Marketing_Interaction__c.sObjectType,
            new Map<Id, Marketing_Interaction__c>(marInteractionList),
            LeadScoreConfigurationDAO.newInstance()
                .getLeadScoreConfigByRecordTypeIds(
                    AccessLevel.USER_MODE,
                    LeadScoreConfigurationDAO.RECTYPE_IDS_CATEGORY_AND_SUB_CATEGORY
                ),
            contactAndLeadIds
        );

        System.assert(
            !LeadScoreUndeterminedDomCmd.processStudyLevel(leadScoreCalcParams).isEmpty(),
            'Was not able to calcualte lead score details'
        );
    }

    @isTest
    private static void processStudyLevelForProgramEnrolmentTest() {//NOPMD test class is mocked user is not needed

        ImplementationSelector.DAO.setMock(new LeadScoreConfigurationDAOMock());
        ImplementationSelector.DAO.setMock(new LeadScoreDetailsDAOMock());
        ImplementationSelector.DAO.setMock(new AccountsDAOMock());
        ImplementationSelector.DAO.setMock(new ContactsDAOMock());
        ImplementationSelector.DAO.setMock(new ProgramEnrollmentsDAOMock());

        List<Lead_Score_Configuration__c> leadScoreConfigList = new List<Lead_Score_Configuration__c>();

        leadScoreConfigList.add(
            new Lead_Score_Configuration__c(
                Name = 'Program Engagement',
                RecordTypeId = LeadScoreConfigurationDAO.RECTYPE_ID_CATEGORY,
                Domestic_International__c = 'Domestic',
                Study_Level__c = 'Undetermined',
                Description__c = '',
                Score_Allocation__c = null,
                Time_Limit_Months__c = null,
                Max_Score__c = 0
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigList, true, AccessLevel.USER_MODE);

        List<Lead_Score_Configuration__c> leadScoreConfigChildList = new List<Lead_Score_Configuration__c>();
        leadScoreConfigChildList.addAll(
            TestDataFactory.createDomestcAndUndeterminedSubCategory(
                leadScoreConfigList[0].Id,
                new List<String>{ 'Program Engagement attendance' },
                new List<Integer>{ 30 }
            )
        );

        LeadScoreConfigurationDAO.newInstance()
            .insertRecords(leadScoreConfigChildList, true, AccessLevel.USER_MODE);

        List<Contact> contactList = TestDataFactory.createTestContactRecords(1);
        ContactsDAO.newInstance().insertRecords(contactList, true, AccessLevel.USER_MODE);

        List<Account> accountList = new List<Account>();
        accountList.add(
            new Account(
                Name = 'Test',
                Program_Code__c = 'QC19',
                RecordTypeId = AccountsDAO.ACCT_ACADEMIC_PROGRAM_ID
            )
        );

        AccountsDAO.newInstance().insertRecords(accountList, false, AccessLevel.USER_MODE);

        List<hed__Program_Enrollment__c> progEnrolmentList = new List<hed__Program_Enrollment__c>();
        progEnrolmentList.add(
            new hed__Program_Enrollment__c(
                hed__Account__c = accountList[0].Id,
                hed__Contact__c = contactList[0].Id
            )
        );

        ProgramEnrollmentsDAO.newInstance()
            .insertRecords(progEnrolmentList, true, AccessLevel.USER_MODE);

        LeadScoreDetailsDAO.newInstance()
            .insertRecords(
                new List<Lead_Score_Detail__c>{
                    new Lead_Score_Detail__c(Contact__c = contactList[0].Id)
                },
                false,
                AccessLevel.USER_MODE
            );

        Set<Id> contactAndLeadIds = new Set<Id>{ contactList[0].Id };

        LeadScoreCalculatorService.LeadScoreCalculatorParams leadScoreCalcParams = new LeadScoreCalculatorService.LeadScoreCalculatorParams(
            hed__Program_Enrollment__c.sObjectType,
            new Map<Id, hed__Program_Enrollment__c>(progEnrolmentList),
            LeadScoreConfigurationDAO.newInstance()
                .getLeadScoreConfigByRecordTypeIds(
                    AccessLevel.USER_MODE,
                    LeadScoreConfigurationDAO.RECTYPE_IDS_CATEGORY_AND_SUB_CATEGORY
                ),
            contactAndLeadIds
        );

        System.assert(
            !LeadScoreUndeterminedDomCmd.processStudyLevel(leadScoreCalcParams).isEmpty(),
            'Was not able to calcualte lead score details'
        );
    }
}
