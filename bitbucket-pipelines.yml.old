# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: dxatscale/sfpowerscripts:latest

clone:
  depth: full

definitions:
  steps:
    - step: &init-build
        name: Init Build
        image: adambestsf/sfdxcli:latest
        #services:
        #  - docker
        #caches:
        #  - docker
        script:
          - rm -f "./pipeline-files"
          - mkdir -p "./pipeline-files"
          #- git clone --single-branch --branch feature/DEPP-617 git@bitbucket.org:qutdev/sfdx-pipelines.git pipeline-files
          - git clone --single-branch --branch main git@bitbucket.org:qutdev/sfdx-pipelines.git pipeline-files
          - /bin/sh ./pipeline-files/utils/initBuild.sh
        artifacts:
          - pipeline-files/**

    - step: &build-package
        name: "Build Packages"
        artifacts:
          - build-artifacts/**
        script:
          - sfdx sfpowerscripts:orchestrator:build --artifactdir build-artifacts --buildnumber $BITBUCKET_BUILD_NUMBER --branch $BITBUCKET_BRANCH
        after-script:
          - rm server.key

    - step: &deploy-to-sandbox
        name: "Deploy to Sandbox"
        script:
          - echo $SERVER_KEY | base64 -d > server.key
          - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME" -a $SANDBOX_NAME
          ## deploy
          - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
        after-script:
          - rm server.key

    - step: &pmd-scanner
        name: "PMD Static Analysis"
        image: adambestsf/sfdxcli:latest
        script:
          - sfdx sfpowerscripts:analyze:pmd -b --sourcedir "src/core-crm" -o core-crm-pmd-output
          - sfdx sfpowerscripts:analyze:pmd -b --sourcedir "src/frameworks" -o frameworks-pmd-output

    - step: &code-scanner
        name: Code Scanner
        image: adambestsf/sfdxcli:latest
        script:
          # - java -version
          # - whereis java
          - export JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk
          - export PATH=$JAVA_HOME/bin:$PATH

          # echo "Install SFDX Scanner Plugin"
          # https://forcedotcom.github.io/sfdx-scanner/en/getting-started/install/
          # - sfdx plugins:install @salesforce/sfdx-scanner
          - sfdx plugins:install @salesforce/sfdx-scanner@2.5.1
          - sfdx plugins

          # echo "Code Scanning: Available Rules"
          - sfdx scanner:rule:list

          # echo "Code Scanning: Run Scanner"
          - CLASS_PATH="./output/force-app/main/default/classes"
          - TRIGGER_PATH="./output/force-app/main/default/triggers"
          - SCAN_CATEGORIES="Best Practices,Code Style,Design,Documentation,Error,Error Prone,Stylistic Issues,Performance,Possible Errors,ECMAScript 6,Security,Variables"

          # test files must output in /**/test-reports/** directory https://support.atlassian.com/bitbucket-cloud/docs/test-reporting-in-pipelines/#How-test-reporting-works
          - mkdir -p "./output/test-reports"
          - sfdx scanner:run --target "$CLASS_PATH/*.cls" --category "$SCAN_CATEGORIES" --format junit --outfile "./output/test-reports/junit-apex-classes.xml" --verbose
          - sfdx scanner:run --target "$TRIGGER_PATH/*.cls" --format junit --outfile "./output/test-reports/junit-apex-triggers.xml" --category "$SCAN_CATEGORIES" --verbose

        artifacts:
          - output/**

pipelines:
  custom:
    Deploy To Your Sandbox:
      - variables:
          - name: SANDBOX_NAME
          - name: CONSUMER_KEY
      - step: *init-build
      - parallel:
          - step: *code-scanner
          - step: *build-package
      - step: *deploy-to-sandbox

    Deploy to IT1SepUAT:
      - step:
          name: "Build Packages"
          artifacts:
            - build-artifacts/**
          script:
            # Dev Hub access is required for creating unlocked packages
            - sfdx sfpowerscripts:orchestrator:build --artifactdir build-artifacts --buildnumber $BITBUCKET_BUILD_NUMBER --branch $BITBUCKET_BRANCH
          after-script:
            - rm server.key
      - step:
          name: "Deploy to IT1SepUAT"
          deployment: IT1SepUAT
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
            - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
          after-script:
            - rm server.key

    Deploy to PRODCI:
      - step:
          name: "Build Packages"
          artifacts:
            - build-artifacts/**
          script:
            # Dev Hub access is required for creating unlocked packages
            - sfdx sfpowerscripts:orchestrator:build --artifactdir build-artifacts --buildnumber $BITBUCKET_BUILD_NUMBER --branch $BITBUCKET_BRANCH
          after-script:
            - rm server.key
      - step:
          name: "Deploy to PRODCI"
          deployment: PRODCI
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
            - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
          after-script:
            - rm server.key

    Deploy to PRODCI2:
      - step:
          name: "Build Packages"
          artifacts:
            - build-artifacts/**
          script:
            # Dev Hub access is required for creating unlocked packages
            - sfdx sfpowerscripts:orchestrator:build --artifactdir build-artifacts --buildnumber $BITBUCKET_BUILD_NUMBER --branch $BITBUCKET_BRANCH
          after-script:
            - rm server.key
      - step:
          name: "Deploy to PRODCI2"
          deployment: PRODCI2
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
            - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
          after-script:
            - rm server.key

    ## Used for 7am automated deploymetn to SIT
    SIT Scheduled Deployment:
      - step:
          name: "Build Packages"
          artifacts:
            - build-artifacts/**
          script:
            # Dev Hub access is required for creating unlocked packages
            - sfdx sfpowerscripts:orchestrator:build --artifactdir build-artifacts --buildnumber $BITBUCKET_BUILD_NUMBER --branch $BITBUCKET_BRANCH
          after-script:
            - rm server.key
      - step:
          name: "Deploy to SIT"
          deployment: SIT
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
            - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
          after-script:
            - rm server.key

  pull-requests:
    feature/IT1Sep/**:
      - parallel:
          - step:
              name: "Validate Changes on IT1SepCI"
              deployment: IT1SepCI
              script:
                - echo $SERVER_KEY | base64 -d > server.key
                - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
                - sfdx sfpowerscripts:orchestrator:validateAgainstOrg -u $SANDBOX_NAME --coveragepercent=80
              after-script:
                - rm server.key

          - step:
              name: "PMD Static Analysis"
              script:
                - sfdx sfpowerscripts:analyze:pmd -b --sourcedir "src/core-crm" -o core-crm-pmd-output
                - sfdx sfpowerscripts:analyze:pmd -b --sourcedir "src/frameworks" -o frameworks-pmd-output
                - sfdx sfpowerscripts:analyze:pmd -b --sourcedir "src/sales" -o sales-pmd-output
                - sfdx sfpowerscripts:analyze:pmd -b --sourcedir "src/service" -o service-pmd-output

        # - step:
        #     name: 'Validate Metadata Coverage for Unlocked Packages'
        #     script:
        #       - sfdx sfpowerkit:package:valid -n core-crm -b StandardValueSet

  branches:
    release/IT1Sep:
      - step:
          name: "Build Packages"
          artifacts:
            - build-artifacts/**
          script:
            # Dev Hub access is required for creating unlocked packages
            - sfdx sfpowerscripts:orchestrator:build --artifactdir build-artifacts --buildnumber $BITBUCKET_BUILD_NUMBER --branch $BITBUCKET_BRANCH
          after-script:
            - rm server.key

      ## Deploy on ST and DMD
      - parallel:
          - step:
              name: "Deploy to IT1SepST"
              deployment: IT1SepST
              script:
                - echo $SERVER_KEY | base64 -d > server.key
                - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
                - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
              after-script:
                - rm server.key
          - step:
              name: "Deploy to IT1SepDMD"
              deployment: IT1SepDMD
              script:
                - echo $SERVER_KEY | base64 -d > server.key
                - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
                - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
              after-script:
                - rm server.key

          - step:
              name: "Deploy to IT1SepTT"
              deployment: IT1SepTT
              script:
                - echo $SERVER_KEY | base64 -d > server.key
                - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
                - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
              after-script:
                - rm server.key

      ## Manual deployments to SIT
      - step:
          name: "Deploy to SIT"
          trigger: manual
          deployment: SIT
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME"  -a $SANDBOX_NAME
            - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
          after-script:
            - rm server.key

      ## Manul deployments to UAT and PROD if required
      - step:
          name: "Deploy to UAT"
          trigger: manual
          deployment: UAT
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $TEST_LOGIN_URL -u "$USERNAME.$SANDBOX_NAME" -a $SANDBOX_NAME
            - sfdx sfpowerscripts:orchestrator:deploy -u $SANDBOX_NAME --artifactdir build-artifacts
          after-script:
            - rm server.key

      - step:
          name: "Deploy to Production"
          trigger: manual
          deployment: Production
          script:
            - echo $SERVER_KEY | base64 -d > server.key
            - sfdx force:auth:jwt:grant -f server.key -i $CONSUMER_KEY -r $PROD_LOGIN_URL -u $USERNAME -a prod
            - sfdx sfpowerscripts:orchestrator:deploy -u prod --artifactdir build-artifacts
          after-script:
            - rm server.key
